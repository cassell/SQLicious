<?php

class SQLiciousGeneratorDatabase
{
	function __construct()
	{
		
	}
	
	function setDatabaseName($val) { $this->databaseName = $val; }
	function getDatabaseName() { return $this->databaseName; }
	
	function setDatabaseHost($val) { $this->databaseHost = $val; }
	function getDatabaseHost() { return $this->databaseHost; }
	
	function setDatabasePassword($val) { $this->databasePassword = $val; }
	function getDatabasePassword() { return $this->databasePassword; }
	
	function setDatabaseUsername($val) { $this->databaseUsername = $val; }
	function getDatabaseUsername() { return $this->databaseUsername; }	
	
	function setGeneratorDestinationDirectory($val) { $this->generatorDestinationDirectory = $val; }
	function getGeneratorDestinationDirectory() { return $this->generatorDestinationDirectory; }
	
	function getTableNames()
	{
		$data = $this->sqliciousQuery('SHOW TABLES');
		
		$tableNames = array();
		
		if($data != null && count($data) > 0)
		{
			foreach($data as $d)
			{
				$tableNames[] = $d['Tables_in_'.$this->getDatabaseName()];
			}
		}
		
		return $tableNames;
	}
	
	function sqliciousQuery($sql)
	{
		$dp = new DatabaseProcessor($this->getDatabaseName());
		$dp->setSQL($sql);
		return $dp->getArray();
	}
	
	function getDaoObjectClassContents($tableName)
	{
		$className = ucfirst(SQLiciousGenerator::toFieldCase($tableName));
		
		$idFieldName = "";
		$fieldsPack = array();
		$setsAndGetsPack = array();
		$defaultRowPack = array();
		
		// get columns
		$columns = $this->getColumns($tableName);
		if($columns != null && count($columns) > 0)
		{
			foreach($columns as $column)
			{
				if($column['Key'] == "PRI")
				{
					$idFieldName = $column['Field'];
				}
				
				if($column['Type'] == "datetime" || $column['Type'] == "date")
				{
					$setsAndGetsPack[] = "\tfinal function set" . ucfirst(SQLiciousGenerator::toFieldCase($column['Field'])) . '($val) { $this->setDatetimeFieldValue(\'' . $column['Field'] .'\',$val); }';
					$setsAndGetsPack[] = "\tfinal function get" . ucfirst(SQLiciousGenerator::toFieldCase($column['Field'])) . "(\$format = null)\n\t{\n\t\tif(\$format == null)\n\t\t{\n\t\t\treturn \$this->getFieldValue('" . $column['Field'] ."');\n\t\t}" . "\n\t\telse\n\t\t{\n\t\t\treturn (\$this->getFieldValue('" . $column['Field'] ."') ? date(\$format,strtotime(\$this->getFieldValue('" . $column['Field'] ."'))) : null);\n\t\t}\n\t}\n";
				}
				else
				{
					$setsAndGetsPack[] = "\tfinal function set" . ucfirst(SQLiciousGenerator::toFieldCase($column['Field'])) . '($val) { $this->setFieldValue(\'' . $column['Field'] .'\',$val); }' . "\n" . "\tfinal function get" . ucfirst(SQLiciousGenerator::toFieldCase($column['Field'])) . "(){ return \$this->getFieldValue('" . $column['Field'] ."'); }" . "\n";
				}
				
				if($column['Default'] == null)
				{
					$defaultRowPack[] = "'" . $column['Field'] . "' => null";
				}
				else
				{
					$defaultRowPack[] = "'" . $column['Field'] . "' => '" . str_replace("'","\'",$column['Default']) . "'";
				}
				
			}
		}
		
		$contents  = "<?php\n";
		$contents .= "\n";
		$contents .= "/* This file is generated by the SQLicious Generator. www.sqlicious.com */\n";
		$contents .= "\n";
		$contents .= "require_once('class.". $className . "DaoFactory.php');\n";
		$contents .= "\n";
		$contents .= "class " .$className . "DaoObject extends DataAccessObject\n";
		$contents .= "{\n";
		
		// construct
		$contents .= "\tfunction __construct(\$row = null)\n";
		$contents .= "\t{\n";
		$contents .= "\t\tparent::__construct(\$row);\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		$contents .= "\tfunction " . $className . "DaoObject(\$row = null)\n";
		$contents .= "\t{\n";
		$contents .= "\t\tself::__construct(\$row);\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		if($idFieldName == "")
		{
			$contents .= "\tfunction save()\n";
			$contents .= "\t{\n";
			$contents .= "\t\tdie('View Objects can not be saved.');\n";
			$contents .= "\t}\n";
			$contents .= "\n";
			
			
			$contents .= "\tfunction delete()\n";
			$contents .= "\t{\n";
			$contents .= "\t\tdie('View Objects can not be deleted.');\n";
			$contents .= "\t}\n";
			$contents .= "\n";
			
		}
		
		// getDatabaseName
		$contents .= "\tfunction getDatabaseName()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn '" . $this->getDatabaseName() . "';\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// getTableName
		$contents .= "\tfunction getTableName()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn '" . $tableName . "';\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// getIdField
		$contents .= "\tfunction getIdField()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn '" . $idFieldName . "';\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// getFactory
		$contents .= "\tfunction getFactory()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn new " . $className . "DaoFactory();\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// sets and gets
		$contents .= implode("\n",$setsAndGetsPack);
		$contents .= "\n";
		
		// getDatabaseName
		$contents .= "\tfunction getDefaultRow()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn array(" . implode(",",$defaultRowPack) . ");\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		$contents .= "}\n";
		
		$contents .= '?>';
		
		return $contents;
	}
	
	function getDaoFactoryClassContents($tableName)
	{
		$className = ucfirst(SQLiciousGenerator::toFieldCase($tableName));
		
		$fieldsPack = array();
		
		// get columns
		$columns = $this->getColumns($tableName);
		if($columns != null && count($columns) > 0)
		{
			foreach($columns as $column)
			{
				if($column['Key'] == "PRI")
				{
					$idFieldName = $column['Field'];
				}
				
				$fieldsPack[] = "'" . $column['Field'] . "'";
			}
		}
		
		$contents  = "<?php\n";
		$contents .= "\n";
		$contents .= "/* This file is generated by the SQLicious Generator. www.sqlicious.com */\n";
		$contents .= "\n";
		$contents .= "require_once('class.". $className . "DaoObject.php');\n";
		$contents .= "\n";
		$contents .= "class " .$className . "DaoFactory extends DataAccessObjectFactory\n";
		$contents .= "{\n";
		
		// construct
		$contents .= "\tfunction __construct()\n";
		$contents .= "\t{\n";
		$contents .= "\t\tparent::__construct();\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// deprecate later
		$contents .= "\tfunction " . $className . "DaoFactory()\n";
		$contents .= "\t{\n";
		$contents .= "\t\tself::__construct();\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// getDatabaseName
		$contents .= "\tfunction getDatabaseName()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn '" . $this->getDatabaseName() . "';\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// getTableName
		$contents .= "\tfunction getTableName()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn '" . $tableName . "';\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// getIdField
		$contents .= "\tfunction getIdField()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn '" . $idFieldName . "';\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// loadDataObject
		$contents .= "\tfunction loadDataObject(\$row)\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn new " . $className . "DaoObject(\$row);\n";
		$contents .= "\t}\n";
		$contents .= "\n";
		
		// getFields
		$contents .= "\tfunction getFields()\n";
		$contents .= "\t{\n";
		$contents .= "\t\treturn array(" . implode(", ",$fieldsPack). ");\n";
		$contents .= "\t}\n";
		
		// get columns
		$bindingsPack = array();
		$columns = $this->getColumns($tableName);
		if($columns != null && count($columns) > 0)
		{
			foreach($columns as $column)
			{
				//datetime
				//varchar(100)
				//int(11)
				//tinyint(1)
				//mediumtext
				//char
				
				if($column['Type'] == "tinyint(1)" || $column['Type'] == "int(1)")
				{
					$bindingsPack[] = "\tfinal function add" . ucfirst(SQLiciousGenerator::toFieldCase($column['Field'])) . "TrueBinding(){ \$this->addBinding(new TrueBooleanBinding('" . $tableName . "." . $column['Field'] . "')); }";
					$bindingsPack[] = "\tfinal function add" . ucfirst(SQLiciousGenerator::toFieldCase($column['Field'])) . "FalseBinding(){ \$this->addBinding(new FalseBooleanBinding('" . $tableName . "." . $column['Field'] . "')); }";
					$bindingsPack[] = "\tfinal function add" . ucfirst(SQLiciousGenerator::toFieldCase($column['Field'])) . "NotTrueBinding(){ \$this->addBinding(new NotEqualsBinding('" . $tableName . "." . $column['Field'] . "',1)); }";
					$bindingsPack[] = "\tfinal function add" . ucfirst(SQLiciousGenerator::toFieldCase($column['Field'])) . "NotFalseBinding(){ \$this->addBinding(new NotEqualsBinding('" . $tableName . "." . $column['Field'] . "',0));  }";
					$bindingsPack[] = "\n";
				}
			}
		}
		
		// sets and gets
		$contents .= "\n";
		$contents .= implode("\n",$bindingsPack);
		$contents .= "\n";
		
		$contents .= "}\n";
		
		return $contents;
		
	}
	
	function getColumns($tableName)
	{
		$dp = new DatabaseProcessor($this->getDatabaseName());
		$dp->setSQL("SHOW COLUMNS FROM " . $dp->escapeString($tableName) . "");
		return $dp->getArray();
	}
	
}


class SQLiciousGenerator
{
	function __construct()
	{
		$this->databases = array();
	}
	
	function addDatabase($sqliciousDatabase)
	{
		$this->databases[$sqliciousDatabase->getDatabaseName()] = $sqliciousDatabase;
	}
	
	function generate()
	{
		foreach($this->databases as $database)
		{
			if(!$this->generateDatabaseDestinationDirectory($database))
			{
				return false;
			}
			
			if(!$this->cleanDatabaseDestinationDirectory($database))
			{
				return false;
			}
			
			if(!$this->generateTableClasses($database))
			{
				return false;
			}
		}
		
		// methods succeeded
		return true;
	}
	
	function cleanDatabaseDestinationDirectory($database)
	{
		$files = glob($database->getGeneratorDestinationDirectory().'/*.php'); 
		if($files != null)
		{
			foreach($files as $file)
			{
				@unlink($file); 
			}
		}
		
		return true;
	}
	
	function generateTableClasses($database)
	{
		$tables = $database->getTableNames();
		
		if($tables != null && count($tables) > 0)
		{
			foreach($tables as $tableName)
			{
				$className = ucfirst($this->toFieldCase($tableName));
				
				if(!$this->writeContents($database->getGeneratorDestinationDirectory().'/class.' . $className . 'DaoFactory.php',$database->getDaoFactoryClassContents($tableName)))
				{
					return false;
				}
				if(!$this->writeContents($database->getGeneratorDestinationDirectory().'/class.' . $className . 'DaoObject.php',$database->getDaoObjectClassContents($tableName)))
				{
					return false;
				}
			}
			
			return true;
		}
		else
		{
			$this->setErrorMessage("No tables in database.");
			return false;
		}
	}
	
	function generateDatabaseDestinationDirectory($database)
	{
		if($database->getGeneratorDestinationDirectory() != "")
		{
			if(!file_exists($database->getGeneratorDestinationDirectory()))
			{
				if(!@mkdir($database->getGeneratorDestinationDirectory()))
				{
					$this->setErrorMessage('Unable to create database destination directory.');
					return false;
				}
				chmod($database->getGeneratorDestinationDirectory(),0777);
			}
			else
			{
				// folder exists
				return true;
			}
		}
		else
		{
			$this->setErrorMessage('Database destination directory not specified.');
			return false;
		}
	}
	
	function writeContents($fileName,$contents)
	{
		if(file_exists($fileName) && !is_writable($fileName))
		{
			$this->setErrorMessage('File is unwritable: ' . $fileName);
			return false;
		}
		else if(@file_put_contents($fileName,$contents) !== FALSE)
		{
			chmod($fileName,0777);
			return true;
		}
		else
		{
			$this->setErrorMessage('Unable to write file: ' . $fileName);
			return false;
		}
	}
	
	static function jsonEncode($array)
	{
		return json_encode(self::utf8EncodeArray($array));
	}
	
	static function utf8EncodeArray($array)
	{
	    foreach($array as $key => $value)
	    {
	    	if(is_array($value))
	    	{
	    		$array[$key] = self::utf8EncodeArray($value);
	    	}
	    	else
	    	{
	    		$array[$key] = utf8_encode($value);
	    	}
	    }
	       
	    return $array;
	}
	
	static function toFieldCase($val)
	{
		$result = '';
		
		$segments = explode("_", $val);
		for ($i = 0; $i < count($segments); $i++)
		{
			$segment = $segments[$i];
			if ($i == 0)
				$result .= $segment;
			else
				$result .= strtoupper(substr($segment, 0, 1)).substr($segment, 1);
		}
		return $result;
		
	}
	
	function setErrorMessage($val) { $this->errorMessage = $val; }
	function getErrorMessage() { return $this->errorMessage; }
	
}

?>